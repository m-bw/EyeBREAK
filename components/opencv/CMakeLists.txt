# This component demonstrates how to add an existing third-party library as a component
# to ESP-IDF build system.
#
# Since we are wrapping the library inside a component,
# the component has to be registered first:
idf_component_register()

# To build a third-party library, ExternalProject CMake module can be used.
# ExternalProject offers many features which are impossible to demonstrate
# in a single example. Please refer to its documentation for more info:
#   https://cmake.org/cmake/help/latest/module/ExternalProject.html
include(ExternalProject)

# Define the location where opencv will be installed:
set(opencv_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/opencv_install)

set(OPENCV_MODULES_LIST "core,objdetect,imgcodecs,ml")

# idk why these aren't in stdlib
set(EXTRA_FLAGS "-DCV_INT32_T_IS_LONG_INT=1 -DM_SQRT2=1.41421356237309504880 -DM_PI=3.14159265358979323846")

# keep default -O3 unless using size optimization, otherwise it will never fit
# TODO invalidate if this changes
if(CONFIG_COMPILER_OPTIMIZATION_SIZE)
    set(OPT_LEVEL "-Os")
endif()
# This function downloads the project, calls CMake to configure it,
# builds the project and installs it to the specified location:
externalproject_add(opencv_proj
    GIT_REPOSITORY https://github.com/opencv/opencv
    GIT_TAG 4.x

    CMAKE_ARGS
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        -DESP32=ON
        -DBUILD_SHARED_LIBS=OFF
        -DCV_DISABLE_OPTIMIZATION=OFF
        -DWITH_IPP=OFF
        -DWITH_TBB=OFF
        -DWITH_OPENMP=OFF
        -DWITH_PTHREADS_PF=OFF
        -DWITH_QUIRC=OFF
        -DWITH_1394=OFF
        -DWITH_CUDA=OFF
        -DWITH_OPENCL=OFF
        -DWITH_OPENCLAMDFFT=OFF
        -DWITH_OPENCLAMDBLAS=OFF
        -DWITH_VA_INTEL=OFF
        -DWITH_EIGEN=OFF
        -DWITH_GSTREAMER=OFF
        -DWITH_GTK=OFF
        -DWITH_JASPER=OFF
        -DWITH_JPEG=OFF
        -DWITH_OPENJPEG=OFF
        -DWITH_OPENEXR=OFF
        -DWITH_WEBP=OFF
        -DBUILD_ZLIB=ON
        -DWITH_PNG=OFF
        -DWITH_TIFF=OFF
        -DWITH_V4L=OFF
        -DWITH_LAPACK=OFF
        -DWITH_ITT=OFF
        -DWITH_PROTOBUF=OFF
        -DWITH_IMGCODEC_HDR=OFF
        -DWITH_IMGCODEC_SUNRASTER=OFF
        -DWITH_IMGCODEC_PXM=OFF
        -DWITH_IMGCODEC_PFM=OFF
        -DBUILD_LIST=${OPENCV_MODULES_LIST}
        -DBUILD_JAVA=OFF
        -DBUILD_opencv_python=OFF
        -DBUILD_opencv_java=OFF
        -DBUILD_opencv_apps=OFF
        -DBUILD_PACKAGE=OFF
        -DBUILD_PERF_TESTS=OFF
        -DBUILD_TESTS=OFF
        -DCV_ENABLE_INTRINSICS=OFF
        -DCV_TRACE=OFF
        -DOPENCV_ENABLE_MEMALIGN=OFF
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
        -DCMAKE_CXX_FLAGS=${EXTRA_FLAGS}
        -DCMAKE_C_FLAGS=${EXTRA_FLAGS}
        -DCMAKE_CXX_FLAGS_RELEASE=${OPT_LEVEL}
        -DCMAKE_C_FLAGS_RELEASE=${OPT_LEVEL}

        PATCH_COMMAND git reset --hard && git apply ${CMAKE_CURRENT_SOURCE_DIR}/patch.diff
    # These options are set so that Ninja immediately outputs
    # the subproject build to the terminal. Otherwise it looks like the
    # build process "hangs" while the subproject is being built.
    USES_TERMINAL_DOWNLOAD TRUE
    USES_TERMINAL_CONFIGURE TRUE
    USES_TERMINAL_BUILD TRUE

    # Specify the installation directory for the subproject
    INSTALL_DIR ${opencv_INSTALL_DIR}
    # Let CMake know that the library is generated by the subproject build step.
    BUILD_BYPRODUCTS
        "${opencv_INSTALL_DIR}/lib/libopencv_imgcodecs.a"
        "${opencv_INSTALL_DIR}/lib/libopencv_imgproc.a"
        "${opencv_INSTALL_DIR}/lib/libopencv_objdetect.a"
        "${opencv_INSTALL_DIR}/lib/libopencv_calib3d.a"
        "${opencv_INSTALL_DIR}/lib/libopencv_features2d.a"
        "${opencv_INSTALL_DIR}/lib/libopencv_flann.a"
        "${opencv_INSTALL_DIR}/lib/libopencv_ml.a"
        "${opencv_INSTALL_DIR}/lib/libopencv_core.a"
        "${opencv_INSTALL_DIR}/lib/opencv4/3rdparty/libzlib.a"
)


add_prebuilt_library(opencv_imgcodecs "${opencv_INSTALL_DIR}/lib/libopencv_imgcodecs.a")
#add_prebuilt_library(libpng "${opencv_INSTALL_DIR}/lib/3rdparty/liblibpng.a")
add_prebuilt_library(libzlib "${opencv_INSTALL_DIR}/lib/opencv4/3rdparty/libzlib.a")
add_prebuilt_library(opencv_imgproc "${opencv_INSTALL_DIR}/lib/libopencv_imgproc.a")
add_prebuilt_library(opencv_objdetect "${opencv_INSTALL_DIR}/lib/libopencv_objdetect.a")
add_prebuilt_library(opencv_calib3d "${opencv_INSTALL_DIR}/lib/libopencv_calib3d.a")
add_prebuilt_library(opencv_features2d "${opencv_INSTALL_DIR}/lib/libopencv_features2d.a")
add_prebuilt_library(opencv_flann "${opencv_INSTALL_DIR}/lib/libopencv_flann.a")
add_prebuilt_library(opencv_ml "${opencv_INSTALL_DIR}/lib/libopencv_ml.a")
add_prebuilt_library(opencv_core "${opencv_INSTALL_DIR}/lib/libopencv_core.a")

#set(IMGCODEC_DEP libpng libzlib)
#target_link_libraries(opencv_imgcodecs INTERFACE ${IMGCODEC_DEP})

set(CORE_DEP libzlib)
target_link_libraries(opencv_core INTERFACE ${CORE_DEP})

set (OBJDETECT_DEP opencv_calib3d opencv_features2d opencv_flann opencv_imgproc)
target_link_libraries(opencv_objdetect INTERFACE ${OBJDETECT_DEP})

set(OPENCV_DEP opencv_imgproc opencv_imgcodecs opencv_objdetect opencv_ml opencv_core)
target_link_libraries(${COMPONENT_LIB} INTERFACE ${OPENCV_DEP})

foreach(DEP ${OPENCV_DEP})
    target_include_directories(${DEP} INTERFACE "${opencv_INSTALL_DIR}/include/opencv4")
    add_dependencies(${DEP} opencv_proj)
endforeach()

# To use opencv in another component, add 'opencv' (the name of this component)
# to PRIV_REQUIRES or REQUIRES list its idf_component_register call.
# See ../../main/CMakeLists.txt for an example.
